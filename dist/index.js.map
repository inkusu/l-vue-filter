{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;AAIA,mCAA2B;AAUd,QAAA,GAAG,GAAG,UAAS,GAAW,EAAE,KAAK,GAAG,EAAE,EAAE,UAAU,GAAG,KAAK;IACnE,IAAI,KAAK,IAAI,GAAG,CAAC,MAAM,EAAE;QACrB,OAAO,GAAG,CAAA;KACb;IAED,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,GAAG,UAAU,CAAA;AAC5C,CAAC,CAAA;AASY,QAAA,yBAAyB,GAAG,UACrC,IAAW,EACX,GAAG,GAAG,EAAE,EACR,UAAU,GAAG,GAAG;IAEhB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QACtB,OAAO,EAAE,CAAA;KACZ;IAED,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE;QAC7B,IAAI,GAAG,EAAE;YACL,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,CAAA;SACtD;QAED,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,GAAG,CAAC,CAAA;IAC7C,CAAC,EAAE,EAAE,CAAC,CAAA;AACV,CAAC,CAAA;AAQY,QAAA,SAAS,GAAG,UAAS,GAAW,EAAE,MAAM,GAAG,GAAG;IACvD,IAAI,CAAC,GAAG;QAAE,OAAO,EAAE,CAAA;IAEnB,OAAO,MAAM,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,uBAAuB,EAAE,GAAG,CAAC,CAAA;AACxE,CAAC,CAAA;AAOY,QAAA,UAAU,GAAG,UAAS,GAAW;IAC1C,IAAI,CAAC,GAAG;QAAE,OAAO,EAAE,CAAA;IAEnB,OAAO,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;AACzB,CAAC,CAAA;AAQY,QAAA,UAAU,GAAG,UAAS,GAAW,EAAE,MAAM,GAAG,YAAY;IACjE,IAAI,CAAC,GAAG;QAAE,OAAO,EAAE,CAAA;IAEnB,IAAI,IAAI,GAAG,gBAAM,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;IAEhC,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE;QAChB,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;KAC7B;IAED,OAAO,EAAE,CAAA;AACb,CAAC,CAAA","sourcesContent":["/**\n * 単体テストを実行できるようにするために、フィルタリング系の関数をここで定義\n */\n\nimport moment from 'moment'\n\n/**\n * 文字列カット関数\n *\n * @param str\n * @param limit\n * @param decoration\n * @returns {*}\n */\nexport const cut = function(str: string, limit = 20, decoration = '・・・') {\n    if (limit >= str.length) {\n        return str\n    }\n\n    return str.substr(0, limit) + decoration\n}\n\n/**\n * 配列からの文字列結合\n *\n * @param list\n * @param key\n * @param decoration\n */\nexport const combinationFromArrayToStr = function(\n    list: any[],\n    key = '',\n    decoration = '/'\n) {\n    if (!Array.isArray(list)) {\n        return ''\n    }\n\n    return list.reduce((x, y, idx) => {\n        if (key) {\n            return idx === 0 ? y[key] : x + decoration + y[key]\n        }\n\n        return idx === 0 ? y : x + decoration + y\n    }, '')\n}\n\n/**\n * 通過の計算\n * @param val\n * @param prefix\n * @returns {string}\n */\nexport const minorUnit = function(val: string, prefix = '￥') {\n    if (!val) return ''\n\n    return prefix + val.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n}\n\n/**\n *\n * @param val\n * @returns {*}\n */\nexport const spaceSplit = function(val: string) {\n    if (!val) return ''\n\n    return val.split(' ')\n}\n\n/**\n * 日付のフォーマット\n * @param val\n * @param format\n * @returns {*}\n */\nexport const dateFormat = function(val: string, format = 'YYYY/MM/DD') {\n    if (!val) return ''\n    // 日付不正時のmomentの警告対策のため、一度Dateインスタンス化\n    let date = moment(new Date(val))\n\n    if (date.isValid()) {\n        return date.format(format)\n    }\n\n    return ''\n}\n"]}