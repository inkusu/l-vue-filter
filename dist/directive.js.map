{"version":3,"file":"directive.js","sourceRoot":"","sources":["../src/directive.ts"],"names":[],"mappings":";;AAGa,QAAA,QAAQ,GAAG;IACpB,IAAI,CAAC,EAAO,EAAE,OAAY,EAAE,KAAU;QAClC,EAAE,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,CAAM,EAAE,EAAE;YAEnC,IAAI,UAAkB,CAAC;YAEvB,UAAU,GAAI,CAAC,CAAC,MAA8B,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAEjE,CAAC,CAAC,MAA6B,CAAC,CAAC,KAAK,GAAG,UAAU,CAAC,OAAO,CAC5D,0BAA0B,EAC1B,KAAK,CACR,CAAC;YACF,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,OAAO,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;IACP,CAAC;IAED,MAAM,CAAC,EAAO,EAAE,OAAY,EAAE,KAAU;QAEpC,UAAU,CAAC,EAAE,EAAE,GAAG,EAAE;YAChB,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;IACP,CAAC;CACJ,CAAC","sourcesContent":["/**\n * 自動でカンマを追加する\n */\nexport const setComma = {\n    bind(el: any, binding: any, vnode: any) {\n        el.addEventListener(\"blur\", (e: any) => {\n\n            let commaValue: string;\n            // @ts-ignore\n            commaValue = (e.target as HTMLTextAreaElement).value.replace(/,/g, \"\")\n                // @ts-ignore\n                (e.target as HTMLTextAreaElement).value = commaValue.replace(\n                /(\\d)(?=(\\d\\d\\d)+(?!\\d))/g,\n                \"$1,\",\n            );\n            vnode.elm.dispatchEvent(new CustomEvent(\"input\", { detail: true }));\n        });\n    },\n\n    update(el: any, binding: any, vnode: any) {\n        // @ts-ignore\n        inViewport(el, () => {\n            vnode.elm.dispatchEvent(new CustomEvent(\"input\"));\n        });\n    },\n};\n"]}